{"categories":[{"title":"cat","uri":"https://leeggco.com/categories/cat/"},{"title":"Centos","uri":"https://leeggco.com/categories/centos/"},{"title":"jQuery","uri":"https://leeggco.com/categories/jquery/"},{"title":"Nginx","uri":"https://leeggco.com/categories/nginx/"},{"title":"Node.js","uri":"https://leeggco.com/categories/node.js/"},{"title":"Vue.js","uri":"https://leeggco.com/categories/vue.js/"},{"title":"数据可视化","uri":"https://leeggco.com/categories/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"}],"posts":[{"content":"一、前言 G6-Editor 是 AntV 官方提供的、专注于图可视化编辑器的类库，也是市面上完成度较高的图可视化编辑器。然而令人诟病的是其文档对新手极度不友好，我一度怀疑此文档只有他们自己开发人员才能看得懂，回首学习的过程里如同是漆黑中前行，苦不堪言。为了让后来者不重蹈覆辙，我愿化为萤火用微弱的光点指引前行的道路。\n目标\n1、组件使用\n2、自定义节点\n3、数据关联\n4、自定义命令\n开发环境\n这里使用的框架是Vue，UI使用Element-ui，以及主角G6-Editor，建议clone文章最下面的github项目结合阅读。\n二、进入实战 2.1Editor 是整个编辑器的主控类，其主要职责是将编辑器的各个组件协同起来。\n用法：\nimport G6Editor from '@antv/g6-editor' const editor = new G6Editor() // 元素面板栏 Itempannel const itempannel = new G6Editor.Itempannel({ container: 'itempannel', }) // 工具栏 Toolbar const toolbar = new G6Editor. Toolbar({ container: 'toolbar', }) // 详细面板 Detailpannel const detailpannel = new G6Editor.Detailpannel ({ container: 'detailpannel' }) // 缩略图 Minimap const minimap = new G6Editor.Minimap({ container: 'minimap', height: 226, width: 226 }) // 组件挂载到Editor editor.add(page) editor.add(itempannel) editor.add(toolbar) editor.add(detailpannel) editor.add(minimap)  Tips：先实例化组件，然后再挂载到Editor\n△ 以上。 Toolbar 工具栏类，负责工具栏按钮的命令绑定、可用禁用状态控制。\nG6-Editor内置了多种命令，亦可以自定义命令。\n用法：\n\u0026lt;!-- Toolbar --\u0026gt; \u0026lt;div id=\u0026quot;toolbar\u0026quot; class=\u0026quot;toolbar\u0026quot;\u0026gt; \u0026lt;i data-command=\u0026quot;delete\u0026quot; class=\u0026quot;command el-icon el-icon-delete\u0026quot; title=\u0026quot;删除\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;i data-command=\u0026quot;zoomIn\u0026quot; class=\u0026quot;command el-icon el-icon-zoom-in\u0026quot; title=\u0026quot;放大\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;i data-command=\u0026quot;save\u0026quot; class=\u0026quot;command el-icon el-icon-upload\u0026quot; title=\u0026quot;保存\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/div\u0026gt;  // Command const Command = G6Editor.Command // 自定义Save命令 Command.registerCommand('save', { // 命令是否进入队列，默认是 true queue: false, // 命令是否可用 enable(eidtor) { return true }, // 正向命令 execute(eidtor) { // 获取当前page const page = this.editor.getCurrentPage() const data = page.save() console.log(data) }, // 快捷键：Ctrl+shirt+s shortcutCodes : [['ctrlKey', 'shiftKey', 's']] })  Tips：工具栏的控件标签必须要有 data-command=\u0026quot;delete\u0026quot;和 class=\u0026quot;command\u0026quot;否则无效。其中delete为内置或自定义命令名称。\n△ 以上。\nItempannel 元素面板栏，负责处理元素添加的通讯。\n用法：\n\u0026lt;!-- 元素面板栏 --\u0026gt; \u0026lt;div id=\u0026quot;itempannel\u0026quot; class=\u0026quot;ph left\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;getItem\u0026quot; data-type=\u0026quot;node\u0026quot; data-shape=\u0026quot;flow-rect\u0026quot; data-size=\u0026quot;120*48\u0026quot; data-label=\u0026quot;常规节点\u0026quot; data-color=\u0026quot;#1890FF\u0026quot;\u0026gt; \u0026lt;img draggable=\u0026quot;false\u0026quot; src=\u0026quot;https://gw.alipayobjects.com/zos/rmsportal/wHcJakkCXDrUUlNkNzSy.svg\u0026quot; alt=\u0026quot;\u0026quot; srcset=\u0026quot;\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;getItem\u0026quot; data-type=\u0026quot;node\u0026quot; data-shape=\u0026quot;flow-circle\u0026quot; data-size=\u0026quot;72*72\u0026quot; data-label=\u0026quot;起止节点\u0026quot; data-color=\u0026quot;#FA8C16\u0026quot;\u0026gt; \u0026lt;img draggable=\u0026quot;false\u0026quot; src=\u0026quot;https://gw.alipayobjects.com/zos/rmsportal/ZnPxbVjKYADMYxkTQXRi.svg\u0026quot; alt=\u0026quot;\u0026quot; srcset=\u0026quot;\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;getItem\u0026quot; data-type=\u0026quot;node\u0026quot; data-shape=\u0026quot;flow-rhombus\u0026quot; data-size=\u0026quot;80*72\u0026quot; data-label=\u0026quot;分叉节点\u0026quot; data-color=\u0026quot;#13C2C2\u0026quot;\u0026gt; \u0026lt;img draggable=\u0026quot;false\u0026quot; src=\u0026quot;https://gw.alipayobjects.com/zos/rmsportal/SnWIktArriZRWdGCnGfK.svg\u0026quot; alt=\u0026quot;\u0026quot; srcset=\u0026quot;\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;getItem\u0026quot; data-type=\u0026quot;node\u0026quot; data-shape=\u0026quot;flow-capsule\u0026quot; data-size=\u0026quot;80*48\u0026quot; data-label=\u0026quot;模型节点\u0026quot; data-color=\u0026quot;#722ED1\u0026quot;\u0026gt; \u0026lt;img draggable=\u0026quot;false\u0026quot; src=\u0026quot;https://gw.alipayobjects.com/zos/rmsportal/rQMUhHHSqwYsPwjXxcfP.svg\u0026quot; alt=\u0026quot;\u0026quot; srcset=\u0026quot;\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 注意！我跟别人不一样，我是自定义的节点 --\u0026gt; \u0026lt;div class=\u0026quot;getItem\u0026quot; data-type=\u0026quot;node\u0026quot; data-shape=\u0026quot;customNode\u0026quot; data-size=\u0026quot;80*48\u0026quot; data-label=\u0026quot;我是自定义的\u0026quot; data-color=\u0026quot;#722ED1\u0026quot;\u0026gt; \u0026lt;img draggable=\u0026quot;false\u0026quot; src=\u0026quot;https://user-gold-cdn.xitu.io/2019/3/15/169809645b016da6?w=114\u0026amp;h=128\u0026amp;f=png\u0026amp;s=1893\u0026quot; alt=\u0026quot;\u0026quot; srcset=\u0026quot;\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  自定义节点\n// 注意！这里不能使用new G6Editor.Flow()的形式，是无效的。 // 应使用 const Flow = G6Editor.Flow const Flow = G6Editor.Flow Flow.registerNode('customNode', { draw(item){ const group = item.getGraphicGroup() const model = item.getModel() group.addShape('text', { attrs: { x: 0, y: 0, fill: '#333', text: model.label } }) group.addShape('text', { attrs: { x: 0, y: 0, fill: '#333', text: ' ('+model.x+', '+model.y+') \\n 原点是组的图坐标', textBaseline: 'top' } }) return group.addShape('rect', { attrs: { x: 0, y: 0, width: 100, height: 100, stroke: 'red' } }) } })  含class=\u0026quot;getItem\u0026quot;的元素会被当做节点，可以往编辑器拖动。\ndata-* 所有 * 都会被设置进添加图项的数据模型。\ndata-type 元素类型\ndata-shape 元素图形\ndata-size 元素大小\ndata-label 元素标签\ndata-color 元素颜色\ndraggable 禁止、启动拖拽默认行为\n△ 以上。\nDetailpannel 属性栏类，负责属性栏显示隐藏的控制。通俗点说，就是不同的操作可以显示不同的面板。\n用法：\n\u0026lt;!-- 详细面板 --\u0026gt; \u0026lt;div id=\u0026quot;detailpannel\u0026quot; class=\u0026quot;detailpannel\u0026quot;\u0026gt; \u0026lt;div data-status=\u0026quot;node-selected\u0026quot; class=\u0026quot;panel\u0026quot; id=\u0026quot;node_detailpanel\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;panel-title\u0026quot;\u0026gt;属性详情\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;block-container\u0026quot;\u0026gt; \u0026lt;el-input v-model=\u0026quot;nodeLabel\u0026quot; size=\u0026quot;mini\u0026quot; @change=\u0026quot;changeNodeLabel\u0026quot; placeholder=\u0026quot;请输入内容\u0026quot;\u0026gt;\u0026lt;/el-input\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   data-status 标识不同页面状态下，各个右键菜单容器的显示隐藏。\n\u0026lt;div data-status=\u0026quot;node-selected\u0026quot;\u0026gt;节点属性栏\u0026lt;/div\u0026gt; \u0026lt;div data-status=\u0026quot;edge-selected\u0026quot;\u0026gt;边属性栏\u0026lt;/div\u0026gt; \u0026lt;div data-status=\u0026quot;group-selected\u0026quot;\u0026gt;群组属性栏\u0026lt;/div\u0026gt; \u0026lt;div data-status=\u0026quot;canvas-selected\u0026quot;\u0026gt;画布属性栏\u0026lt;/div\u0026gt; \u0026lt;div data-status=\u0026quot;multi-selected\u0026quot;\u0026gt;多选时属性栏\u0026lt;/div\u0026gt;  △ 以上。\nMinimap 缩略图类，负责绘制缩略图及双图联动。\n\u0026lt;!-- 缩略图 --\u0026gt; \u0026lt;div class=\u0026quot;minimap\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;panel-title\u0026quot;\u0026gt;缩略图\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;minimap\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  这个倒没什么好说的，可以参考官方的文档和实例。\n△ 以上。\n高能预警！ 最后一个也是最重要的一个！数据关联！！！不和业务数据关联的一切都是耍流氓。\n还记得Detailpannel属性栏类吗？ 里面有一个输入框，事件绑定了changeNodeLabel，用来修改节点的label属性。\n// methods changeNodeLabel(value) { const editor = this.editor // 执行命令 editor.executeCommand(() =\u0026gt; { const page = editor.getCurrentPage() const selectedItems = page.getSelected() selectedItems.forEach(item =\u0026gt; { // 更新属性 page.update(item.id, { label: value }) }) }) }  另外选择节点，也需要将label的值设置到输入框里。\n// 获取当前page const currentPage = editor.getCurrentPage() // 监听选择变化 currentPage.on('afteritemselected', ev =\u0026gt; { // 选择对象为Node节点 if (ev.item.isNode) { // 获取属性 const nm = ev.item.getModel() _this.nodeLabel = nm.label } // 选择对象为Edge节点 if (ev.item.isEdge) { // 获取属性 const nm = ev.item.getModel() _this.nodeLabel = nm.label } })  △ 以上。\n后话 由于代码段都是比较零散，最好结合下面提供在github上的项目食用，如果文章对你有帮助，请随手一个赞或者收藏。另外文章写得仓促有很多不足的地方，希望大家轻拍，哈哈哈~\ngithub仓库 ：https://github.com/leeggco/g6-editor-demo\n这篇文章只提供了基础的知识，后续的进阶还是需要结合G6、G6-editor的文档。\n","id":0,"section":"posts","summary":"一、前言 G6-Editor 是 AntV 官方提供的、专注于图可视化编辑器的类库，也是市面上完成度较高的图可视化编辑器。然而令人诟病的是其文档对新手极度不友好，我一度怀","tags":["G6"],"title":"G6 Editor Tutorial","uri":"https://leeggco.com/2020/04/g6-editor-tutorial/","year":"2020"},{"content":"由于开发微信小程序https的需求，把阿里云上的Nodejs配置了https。 1、首先在阿里云域名管理里面申请Symantec 免费版 SSL，并验证。 2、下载密钥文件，放在程序的目录里，这里我在根目录创建https来存放。 3、在node程序里配置https，因为使用了express，所以是./bin/www文件。这里有个问题是https不能监听443端口，因为nginx需要使用这个端口，把http端口设置为8012，https端口设置为9012，代码如下：\nvar app = require('../app'); var debug = require('debug')('books:server'); var http = require('http'); var https = require('https'); var fs = require('fs'); var options = { key: fs.readFileSync('./https/domain.key'), cert: fs.readFileSync('./https/domain.pem'), requestCert: true, rejectUnauthorized: true } /** * Get port from environment and store in Express. */ var port = normalizePort(process.env.PORT || '8012'); app.set('port', 8012); console.log('listen : ' + port); /** * Create HTTPs server. */ //var server = http.createServer(app); var server = http.createServer(app); https.createServer(options, app).listen(9012);  4、配置nginx，如下：\nserver { listen 80; server_name domain.com www.domain.com; rewrite ^(.*)$ https://$host$1 permanent; } server { listen 443 ssl; server_name domain.com www.domain.com; ssl on; ssl_certificate /etc/nginx/cert/domain.pem; ssl_certificate_key /etc/nginx/cert/domain.key; location / { proxy_pass http://localhost:8012; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; } location /public { root /usr/york/leeggco; } }  这里要注意的地方是server_name 需要同时设置domain.com和www.domain.com这样访问domain.com的时候也会自动跳转到https。 配置完后重启nginx完成。\n","id":1,"section":"posts","summary":"由于开发微信小程序https的需求，把阿里云上的Nodejs配置了https。 1、首先在阿里云域名管理里面申请Symantec 免费版 SSL，","tags":["others"],"title":"centos 6x nodejs express nginx https 阿里云配置","uri":"https://leeggco.com/2020/04/centos-ngxin-aliyun-config/","year":"2020"},{"content":"修改配置后重新加载生效\nnginx -s reload  重新打开日志文件\nnginx -s reopen  测试nginx配置文件是否正确\nnginx -t -c /path/to/nginx.conf  关闭nginx\nnginx -s stop //快速停止nginx quit //完整有序的停止nginx  其他的停止nginx 方式\nps -ef | grep nginx kill -QUIT 主进程号 //从容停止Nginx kill -TERM 主进程号 //快速停止Nginx pkill -9 nginx //强制停止Nginx  启动nginx\nnginx -c /path/to/nginx.conf  平滑重启nginx\nkill -HUP 主进程号  ","id":2,"section":"posts","summary":"修改配置后重新加载生效 nginx -s reload 重新打开日志文件 nginx -s reopen 测试nginx配置文件是否正确 nginx -t -c /path/to/nginx.conf 关闭nginx nginx -s stop //快速停止nginx quit //完整","tags":["others"],"title":"Nginx 基本命令","uri":"https://leeggco.com/2020/04/nginx-base-command/","year":"2020"},{"content":"最近项目使用了JQuery-ui 的拖拽组件，Webpack打包出现 jquery is not defined 错误及ui组件无法使用。 最后的解决方式是，使用npm 包引入jQuery和expose-loader，在webpack.base.conf.js 中的alias引入jQuery，再添加jQuery插件，并在页面引入。\nnpm install jquery expose-loader --save  具体代码：\n// webpack.base.conf.js resolve: { extensions: ['.js', '.vue', '.json'], alias: { 'vue // webpack.prod.conf.js plugins: [ // http://vuejs.github.io/vue-loader/en/workflow/production.html new webpack.DefinePlugin({ // 'process.env': env, $: 'jquery', jQuery: 'jquery', jquery: 'jquery', 'window.jQuery': 'jquery' }) // ... 其他插件 ] // main.js import $ from 'expose-loader?$!jquery' import '../static/jquery-ui.min.js' window.$ = $ // 增加上面代码到main.js，便可以在全局范围内使用$及ui插件。  PS: 有可能页面还会报错，试着在页面单独引入JQuery\nimport $ from 'expose-loader?$!jquery'  或者是这个报错，同样适用。\n This dependency was not found: * expose-loader?$!jquery in ./src/main.js, ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script\u0026amp;index=0\u0026amp;bustCache!./src/components/boardTopu/index.vue and 1 other To install it, you can run: npm install --save expose-loader?$!jquery  ","id":3,"section":"posts","summary":"最近项目使用了JQuery-ui 的拖拽组件，Webpack打包出现 jquery is not defined 错误及ui组件无法使用。 最后的解决方式是，使用npm 包引入jQue","tags":["others"],"title":"Vue.js 引入JQuery 及 JQuery-ui组件的使用","uri":"https://leeggco.com/2020/04/vue-import-jquery/","year":"2020"},{"content":"MariaDB 安装\nsudo yum install MariaDB-server MariaDB-client  启动\nservice mysql start  设置root用户密码\nmysqladmin -u root password \u0026quot;mypassword\u0026quot;  登录\nmysql -uroot -p  Adonis adonis支持 PostgreSQL，SQLite，MySQL，MariaDB，Oracle，MSSQL 数据库，默认为SQLite。在 config/database 中修改配置。\n配置数据库\nconnection: Env.get('DB_CONNECTION', 'mysql'),  创建数据库模型（Model）\nadonis make:model posts  创建迁移（migration）\n数据库迁移是一种从代码创建，更改和删除数据库表而不是编写SQL查询的过程。\nadonis make:migration posts  查看状态\nadonis migration:status  执行迁移，创建表格\nadonis migration:run  PM2 pm2 start server.js  ","id":4,"section":"posts","summary":"MariaDB 安装 sudo yum install MariaDB-server MariaDB-client 启动 service mysql start 设置root用户密码 mysqladmin -u root password \u0026quot;mypassword\u0026quot; 登录 mysql -uroot -p Adonis adonis支持 PostgreSQL，SQLite，MySQL，Mari","tags":["adonis"],"title":"Adonis —— MariaDB 数据库基本操作","uri":"https://leeggco.com/2020/04/adonis-mariadb-pm2/","year":"2020"},{"content":"查询参数query \u0026amp; params\nRoute.get('/posts', ({ request }) =\u0026gt; { return request.get() })  使用post 请求\nRoute.post('/posts', ({ request }) =\u0026gt; request.post())  同时得到请求地址的参数，使用request.all()\nRoute.post('/posts', ({ request }) =\u0026gt; request.all())  获取指定参数，使用request.only()\nRoute.post('/posts', ({ request }) =\u0026gt; request.only(['title', 'content']))  排除数据，使用request.except()\nRoute.post('/posts', ({ request }) =\u0026gt; request.except(['title', 'content']))  获取指定参数，使用request.input()\nRoute.post('/posts', ({ request }) =\u0026gt; request.input('status', '默认'))  Form 表单数据\n{ \u0026quot;title\u0026quot;: [ \u0026quot;Lemon\u0026quot;, \u0026quot;Bnanna\u0026quot; ], \u0026quot;content\u0026quot;: [ \u0026quot;🍋\u0026quot;, \u0026quot;🍌\u0026quot; ] } Route.post('/posts', ({ request }) =\u0026gt; request.collet(['title', 'content']))  自动转换，使用request.collect\nRoute.post('/posts', ({ request }) =\u0026gt; request.collect(['title', 'content']))  获取所有头部信息\nRoute.get('/posts', ({ request }) =\u0026gt; request.headers())  获取指定信息\nRoute.get('/posts', ({ request }) =\u0026gt; request.header('user-agent'))  设置响应头部信息\nRoute.get('/posts', ({ request, response }) =\u0026gt; { // response.header('Content-type', 'text/plain') // 简写 response.type('text') return '\u0026lt;h1\u0026gt;List of posts.\u0026lt;/h1\u0026gt;' })  Cookies 设置与获取\nRoute.get('/posts', ({ request, response }) =\u0026gt; { // 设置cookie response.cookie('theme', 'dark') // 获取cookie // request.cookie('theme', '默认') // 删除cookie response.clearCookie('theme') return request.cookies() })  Response 响应\nRoute.get('/posts', ({ response }) =\u0026gt; { // response.send('List of response') // return 'List of return.' // 会自动将对象和组数转换成JSON return { 'title': 'hello' } })  异步响应\nconst delay = (data, time) =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { resolve(data) }, time); }) } Route.get('/posts', async ({ response }) =\u0026gt; { const data = await delay('List of Posts.', 3000) return data })  重定向 Redirects\nRoute.get('/list-of-posts', ({ response }) =\u0026gt; { // response.redirect('/posts', true, 301) response.route('list-of-posts') }) Route.get('/list-of-food-posts', ({ response }) =\u0026gt; { // response.redirect('/posts', true, 301) response.route('list-of-posts', { category: 'food' }) }) Route.get('/posts/:category?', ({ params }) =\u0026gt; { return `List of ${ params.category || 'default' } Posts.` }).as('list-of-posts')  完整源码\n","id":5,"section":"posts","summary":"查询参数query \u0026amp; params Route.get('/posts', ({ request }) =\u0026gt; { return request.get() }) 使用post 请求 Route.post('/posts', ({ request }) =\u0026gt; request.post()) 同时得到请求地址的参数，使用request.all() Route.post('/posts', ({ request }) =\u0026gt; request.all()) 获取指","tags":["adonis"],"title":"Adonis —— 请求","uri":"https://leeggco.com/2020/04/adonis-request/","year":"2020"},{"content":"get 请求\nRoute.get('/posts', () =\u0026gt; 'Get has been created.')  post 请求\nRoute.post('/posts', () =\u0026gt; 'Post has been created.')  create 创建，这里有个重复路由的问题，需要放在posts/:id 的前面\nRoute.get('/posts/create', 'PostController.create')  请求指定数据，如果不希望强制传入id 则可以使用 /posts/:id?\nRoute.get('/posts/:id', ({ params }) =\u0026gt; { return`You're watching post ${params.id}` })  patch 更新\nRoute.patch('/posts/:id', ({ params }) =\u0026gt; { return`Post ${params.id} has been updated.` })  delete 删除\nRoute.delete('/posts/:id', ({ params }) =\u0026gt; { return`Post ${params.id} has been removed.` })  edit 编辑\nRoute.get('/posts/:id/edit', 'PostController.edit')  资源路由\n// 因为以上请求方式非常常见，所以可以使用资源路由来达到同样的效果 Route .resource('posts', 'PostController') // 排除请求类型 // .except(['index']) // .only 指定可用的请求 // .only(['index', 'show']) // .apiOnly()  路由命名\nRoute .get('/user---name', () =\u0026gt; 'List of users.') .as('users.index')  路由格式\nRoute.get('/users', ({ request }) =\u0026gt; { switch (request.format()) { case 'json': return [ { name: 'york'}, { name: 'leeggco'} ] default: return '- york- leeggco' } }).formats(['json']) // 强制格式 // .formats(['json', 'html'], true) // http://127.0.0.1:3333/users.json // http://127.0.0.1:3333/users  路由群组\nRoute .group(() =\u0026gt; { Route.get('users', () =\u0026gt; 'Manage users') Route.get('posts', () =\u0026gt; 'Manage posts') }) .prefix('admin') // http://127.0.0.1:3333/admin/users // http://127.0.0.1:3333/admin/posts  单页应用的路由\nRoute.any('*', ({ view }) =\u0026gt; view.render('welcome')) // http://127.0.0.1:3333/any  完整代码\n","id":6,"section":"posts","summary":"get 请求 Route.get('/posts', () =\u0026gt; 'Get has been created.') post 请求 Route.post('/posts', () =\u0026gt; 'Post has been created.') create 创建，这里有个重复路由的问题，需要放在posts/:id 的前面 Route.get('/posts/create', 'PostController.create') 请求指定数据，如果不希望强制传入","tags":["adonis"],"title":"Adonis —— 路由","uri":"https://leeggco.com/2020/04/adonis-route/","year":"2020"},{"content":"安装命令（全局）\nnpm install @adonisjs/cli --global  或\nnpm i -g adonis-cli  安装数据库（sqlite3）\nnpm install sqlite3  创建项目\nadonis new demo-adonis  运行项目\nnpm run serve:dev  创建控制器\nadonis make:controller Posts  创建视图\nadonis make:view posts  创建数据表\nadonis make:migration Post  生成数据表\nadonis migration:run  ","id":7,"section":"posts","summary":"安装命令（全局） npm install @adonisjs/cli --global 或 npm i -g adonis-cli 安装数据库（sqlite3） npm install sqlite3 创建项目 adonis new demo-adonis 运行项目 npm run serve:dev 创建控制器 adonis make:controller Posts 创建视图 adonis make:view posts 创建数据表 adonis make:migration","tags":["adonis"],"title":"adonis —— 常用命令","uri":"https://leeggco.com/2020/04/adonis-command/","year":"2020"},{"content":"hello, Hugo ","id":8,"section":"posts","summary":"hello, Hugo ","tags":["test"],"title":"hello, world","uri":"https://leeggco.com/2020/04/hello-world/","year":"2020"}],"tags":[{"title":"adonis","uri":"https://leeggco.com/tags/adonis/"},{"title":"G6","uri":"https://leeggco.com/tags/g6/"},{"title":"index","uri":"https://leeggco.com/tags/index/"},{"title":"others","uri":"https://leeggco.com/tags/others/"},{"title":"test","uri":"https://leeggco.com/tags/test/"}]}